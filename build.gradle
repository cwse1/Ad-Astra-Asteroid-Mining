plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

base {
	archivesName = project.archives_base_name
}

version = "$project.version+${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroup 'org.ladysnake'
			includeGroup 'team.lodestar.lodestone'
			includeGroupByRegex 'dev\\.onyxstudios.*'
		}
	}
	maven {
		name = "GeckoLib"
		url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
		content {
			includeGroupByRegex("software\\.bernie.*")
			includeGroup("com.eliotlash.mclib")
		}
	}
}

loom {
	runs {
		testClient {
			inherit client
			vmArgs "-Xmx8G"
			configName = "Test Client"

			runDir = "~/projects/code/mc/testEnv"
		}

		datagen {
			client()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"

			runDir "build/datagen"
		}
	}
	mods {
		"asteroid_mining" {
			sourceSet("main")
		}
	}
}

dependencies {
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	modImplementation libs.quilt.loader
	modImplementation libs.bundles.quilted.fabric.api

	modImplementation libs.geckolib
	implementation libs.geckolib.mclib
	modImplementation libs.trinkets
	modImplementation libs.arathain.lodestone
	include libs.arathain.lodestone
	modImplementation libs.midnightlib
	include libs.midnightlib
	modImplementation libs.bundles.cca
	include libs.bundles.cca

	modImplementation libs.cloth.config
	modCompileOnly libs.bundles.rei
	modImplementation libs.mod.menu

	modLocalRuntime libs.bundles.devenv
}

processResources {
	inputs.properties 'version': version, 'group': project.group

	filesMatching('quilt.mod.json') {
		expand 'version': version, 'group': project.group
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
	withSourcesJar()
	// withJavadocJar()
}

jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

//publishing {
//	publications {
//		mavenJava(MavenPublication) {
//			from components.java
//		}
//	}
//
//	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
//	repositories {
//		// Add repositories to publish to here.
//		// Notice: This block does NOT have the same function as the block in the top level.
//		// The repositories here will be used for publishing your artifact, not for
//		// retrieving dependencies.
//	}
//}
